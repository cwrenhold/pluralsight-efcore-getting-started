using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using SamuraiApp.Domain;

namespace SamuraiApp.Data;

public class SamuraiContext : DbContext
{
    public DbSet<Samurai> Samurais { get; set; }
    public DbSet<Quote> Quotes { get; set; }
    public DbSet<Battle> Battles { get; set; }
    // public DbSet<SamuraiBattleStat> SamuraiBattleStats { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        // optionsBuilder.UseSqlServer(
        //     // @"Data Source=localhost,9001;Initial Catalog=SamuraiAppDb;Persist Security Info=True;User ID=sa;Password=Password01!;TrustServerCertificate=True",
        //     @"Server=localhost;Port=9002;Database=postgres;User Id=postgres;Password=Password01!;",
        //     opt => opt.MaxBatchSize(100)
        // )
        //     .LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Command.Name }, LogLevel.Information)
        //     .EnableSensitiveDataLogging();

        optionsBuilder.UseNpgsql(
            @"Server=localhost;Port=9002;Database=postgres;User Id=postgres;Password=Password01!;",
            opt => opt.MaxBatchSize(100)
        )
            .LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Command.Name }, LogLevel.Information)
            .EnableSensitiveDataLogging();
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Samurai>()
            // Define the many to many relationship
            .HasMany(s => s.Battles)
            .WithMany(b => b.Samurais)
            // Tell EF to use an entity for the relationships instead of an automatic one
            .UsingEntity<BattleSamurai>(
                bs => bs.HasOne<Battle>().WithMany(),
                bs => bs.HasOne<Samurai>().WithMany()
            )
            // Set the DateJoined property to be automatically generated by the database on insert
            .Property(bs => bs.DateJoined)
            .HasDefaultValueSql("NOW()");

        // Specify the table name for an entity if required
        // This will trigger a migration to change the table name and the names of any related indexes/constraints
        // modelBuilder.Entity<Horse>().ToTable("Horses");

        // Flag this entity as having no key, so no tracking is supplied for this entity type at all, as it relates to a view
        // Note: No migration will be added for this, as EF doesn't handle the creation of views itself, these need to be done by writing a migration script manually
        // modelBuilder.Entity<SamuraiBattleStat>()
        //     .HasNoKey()
        //     .ToView("SamuraiBattleStats");
    }
}